
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__dbus_hpp_org_freedesktop_NetworkManager_VPN_Plugin_hpp__proxy__H__
#define __sdbuscpp__dbus_hpp_org_freedesktop_NetworkManager_VPN_Plugin_hpp__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace NetworkManager {
namespace VPN {

class Plugin_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.NetworkManager.VPN.Plugin";

protected:
    Plugin_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
        proxy_.uponSignal("StateChanged").onInterface(INTERFACE_NAME).call([this](const uint32_t& state){ this->onStateChanged(state); });
        proxy_.uponSignal("SecretsRequired").onInterface(INTERFACE_NAME).call([this](const std::string& message, const std::vector<std::string>& secrets){ this->onSecretsRequired(message, secrets); });
        proxy_.uponSignal("Config").onInterface(INTERFACE_NAME).call([this](const std::map<std::string, sdbus::Variant>& config){ this->onConfig(config); });
        proxy_.uponSignal("Ip4Config").onInterface(INTERFACE_NAME).call([this](const std::map<std::string, sdbus::Variant>& ip4config){ this->onIp4Config(ip4config); });
        proxy_.uponSignal("Ip6Config").onInterface(INTERFACE_NAME).call([this](const std::map<std::string, sdbus::Variant>& ip6config){ this->onIp6Config(ip6config); });
        proxy_.uponSignal("LoginBanner").onInterface(INTERFACE_NAME).call([this](const std::string& banner){ this->onLoginBanner(banner); });
        proxy_.uponSignal("Failure").onInterface(INTERFACE_NAME).call([this](const uint32_t& reason){ this->onFailure(reason); });
    }

    ~Plugin_proxy() = default;

    virtual void onStateChanged(const uint32_t& state) = 0;
    virtual void onSecretsRequired(const std::string& message, const std::vector<std::string>& secrets) = 0;
    virtual void onConfig(const std::map<std::string, sdbus::Variant>& config) = 0;
    virtual void onIp4Config(const std::map<std::string, sdbus::Variant>& ip4config) = 0;
    virtual void onIp6Config(const std::map<std::string, sdbus::Variant>& ip6config) = 0;
    virtual void onLoginBanner(const std::string& banner) = 0;
    virtual void onFailure(const uint32_t& reason) = 0;

public:
    void Connect(const std::map<std::string, std::map<std::string, sdbus::Variant>>& connection)
    {
        proxy_.callMethod("Connect").onInterface(INTERFACE_NAME).withArguments(connection);
    }

    void ConnectInteractive(const std::map<std::string, std::map<std::string, sdbus::Variant>>& connection, const std::map<std::string, sdbus::Variant>& details)
    {
        proxy_.callMethod("ConnectInteractive").onInterface(INTERFACE_NAME).withArguments(connection, details);
    }

    std::string NeedSecrets(const std::map<std::string, std::map<std::string, sdbus::Variant>>& settings)
    {
        std::string result;
        proxy_.callMethod("NeedSecrets").onInterface(INTERFACE_NAME).withArguments(settings).storeResultsTo(result);
        return result;
    }

    void Disconnect()
    {
        proxy_.callMethod("Disconnect").onInterface(INTERFACE_NAME);
    }

    void SetConfig(const std::map<std::string, sdbus::Variant>& config)
    {
        proxy_.callMethod("SetConfig").onInterface(INTERFACE_NAME).withArguments(config);
    }

    void SetIp4Config(const std::map<std::string, sdbus::Variant>& config)
    {
        proxy_.callMethod("SetIp4Config").onInterface(INTERFACE_NAME).withArguments(config);
    }

    void SetIp6Config(const std::map<std::string, sdbus::Variant>& config)
    {
        proxy_.callMethod("SetIp6Config").onInterface(INTERFACE_NAME).withArguments(config);
    }

    void SetFailure(const std::string& reason)
    {
        proxy_.callMethod("SetFailure").onInterface(INTERFACE_NAME).withArguments(reason);
    }

    void NewSecrets(const std::map<std::string, std::map<std::string, sdbus::Variant>>& connection)
    {
        proxy_.callMethod("NewSecrets").onInterface(INTERFACE_NAME).withArguments(connection);
    }

public:
    uint32_t State()
    {
        return proxy_.getProperty("State").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}}}} // namespaces

#endif
