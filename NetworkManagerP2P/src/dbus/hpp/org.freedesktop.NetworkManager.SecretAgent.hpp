
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__dbus_hpp_org_freedesktop_NetworkManager_SecretAgent_hpp__proxy__H__
#define __sdbuscpp__dbus_hpp_org_freedesktop_NetworkManager_SecretAgent_hpp__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace NetworkManager {

class SecretAgent_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.NetworkManager.SecretAgent";

protected:
    SecretAgent_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~SecretAgent_proxy() = default;

public:
    std::map<std::string, std::map<std::string, sdbus::Variant>> GetSecrets(const std::map<std::string, std::map<std::string, sdbus::Variant>>& connection, const sdbus::ObjectPath& connection_path, const std::string& setting_name, const std::vector<std::string>& hints, const uint32_t& flags)
    {
        std::map<std::string, std::map<std::string, sdbus::Variant>> result;
        proxy_.callMethod("GetSecrets").onInterface(INTERFACE_NAME).withArguments(connection, connection_path, setting_name, hints, flags).storeResultsTo(result);
        return result;
    }

    void CancelGetSecrets(const sdbus::ObjectPath& connection_path, const std::string& setting_name)
    {
        proxy_.callMethod("CancelGetSecrets").onInterface(INTERFACE_NAME).withArguments(connection_path, setting_name);
    }

    void SaveSecrets(const std::map<std::string, std::map<std::string, sdbus::Variant>>& connection, const sdbus::ObjectPath& connection_path)
    {
        proxy_.callMethod("SaveSecrets").onInterface(INTERFACE_NAME).withArguments(connection, connection_path);
    }

    void DeleteSecrets(const std::map<std::string, std::map<std::string, sdbus::Variant>>& connection, const sdbus::ObjectPath& connection_path)
    {
        proxy_.callMethod("DeleteSecrets").onInterface(INTERFACE_NAME).withArguments(connection, connection_path);
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

#endif
