
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__dbus_hpp_fi_w1_wpa_supplicant1_hpp__proxy__H__
#define __sdbuscpp__dbus_hpp_fi_w1_wpa_supplicant1_hpp__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace fi {
namespace w1 {

class wpa_supplicant1_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "fi.w1.wpa_supplicant1";

protected:
    wpa_supplicant1_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
        proxy_.uponSignal("InterfaceAdded").onInterface(INTERFACE_NAME).call([this](const sdbus::ObjectPath& path, const std::map<std::string, sdbus::Variant>& properties){ this->onInterfaceAdded(path, properties); });
        proxy_.uponSignal("InterfaceRemoved").onInterface(INTERFACE_NAME).call([this](const sdbus::ObjectPath& path){ this->onInterfaceRemoved(path); });
        proxy_.uponSignal("PropertiesChanged").onInterface(INTERFACE_NAME).call([this](const std::map<std::string, sdbus::Variant>& properties){ this->onPropertiesChanged(properties); });
    }

    ~wpa_supplicant1_proxy() = default;

    virtual void onInterfaceAdded(const sdbus::ObjectPath& path, const std::map<std::string, sdbus::Variant>& properties) = 0;
    virtual void onInterfaceRemoved(const sdbus::ObjectPath& path) = 0;
    virtual void onPropertiesChanged(const std::map<std::string, sdbus::Variant>& properties) = 0;

public:
    sdbus::ObjectPath CreateInterface(const std::map<std::string, sdbus::Variant>& args)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("CreateInterface").onInterface(INTERFACE_NAME).withArguments(args).storeResultsTo(result);
        return result;
    }

    void RemoveInterface(const sdbus::ObjectPath& path)
    {
        proxy_.callMethod("RemoveInterface").onInterface(INTERFACE_NAME).withArguments(path);
    }

    sdbus::ObjectPath GetInterface(const std::string& ifname)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("GetInterface").onInterface(INTERFACE_NAME).withArguments(ifname).storeResultsTo(result);
        return result;
    }

    void ExpectDisconnect()
    {
        proxy_.callMethod("ExpectDisconnect").onInterface(INTERFACE_NAME);
    }

public:
    std::string DebugLevel()
    {
        return proxy_.getProperty("DebugLevel").onInterface(INTERFACE_NAME);
    }

    void DebugLevel(const std::string& value)
    {
        proxy_.setProperty("DebugLevel").onInterface(INTERFACE_NAME).toValue(value);
    }

    bool DebugTimestamp()
    {
        return proxy_.getProperty("DebugTimestamp").onInterface(INTERFACE_NAME);
    }

    void DebugTimestamp(const bool& value)
    {
        proxy_.setProperty("DebugTimestamp").onInterface(INTERFACE_NAME).toValue(value);
    }

    bool DebugShowKeys()
    {
        return proxy_.getProperty("DebugShowKeys").onInterface(INTERFACE_NAME);
    }

    void DebugShowKeys(const bool& value)
    {
        proxy_.setProperty("DebugShowKeys").onInterface(INTERFACE_NAME).toValue(value);
    }

    std::vector<sdbus::ObjectPath> Interfaces()
    {
        return proxy_.getProperty("Interfaces").onInterface(INTERFACE_NAME);
    }

    std::vector<std::string> EapMethods()
    {
        return proxy_.getProperty("EapMethods").onInterface(INTERFACE_NAME);
    }

    std::vector<std::string> Capabilities()
    {
        return proxy_.getProperty("Capabilities").onInterface(INTERFACE_NAME);
    }

    std::vector<uint8_t> WFDIEs()
    {
        return proxy_.getProperty("WFDIEs").onInterface(INTERFACE_NAME);
    }

    void WFDIEs(const std::vector<uint8_t>& value)
    {
        proxy_.setProperty("WFDIEs").onInterface(INTERFACE_NAME).toValue(value);
    }

private:
    sdbus::IProxy& proxy_;
};

}} // namespaces

#endif
