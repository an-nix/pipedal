
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__dbus_hpp_org_freedesktop_DBus_Properties_hpp__proxy__H__
#define __sdbuscpp__dbus_hpp_org_freedesktop_DBus_Properties_hpp__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace DBus {

class Properties_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.DBus.Properties";

protected:
    Properties_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~Properties_proxy() = default;

public:
    sdbus::Variant Get(const std::string& interface, const std::string& propname)
    {
        sdbus::Variant result;
        proxy_.callMethod("Get").onInterface(INTERFACE_NAME).withArguments(interface, propname).storeResultsTo(result);
        return result;
    }

    std::map<std::string, sdbus::Variant> GetAll(const std::string& interface)
    {
        std::map<std::string, sdbus::Variant> result;
        proxy_.callMethod("GetAll").onInterface(INTERFACE_NAME).withArguments(interface).storeResultsTo(result);
        return result;
    }

    void Set(const std::string& interface, const std::string& propname, const sdbus::Variant& value)
    {
        proxy_.callMethod("Set").onInterface(INTERFACE_NAME).withArguments(interface, propname, value);
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

#endif
