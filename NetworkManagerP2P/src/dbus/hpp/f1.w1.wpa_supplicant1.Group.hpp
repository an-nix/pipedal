
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__dbus_hpp_f1_w1_wpa_supplicant1_Group_hpp__proxy__H__
#define __sdbuscpp__dbus_hpp_f1_w1_wpa_supplicant1_Group_hpp__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace fi {
namespace w1 {
namespace wpa_supplicant1 {

class Group_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "fi.w1.wpa_supplicant1.Group";

protected:
    Group_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
        proxy_.uponSignal("PeerJoined").onInterface(INTERFACE_NAME).call([this](const sdbus::ObjectPath& peer){ this->onPeerJoined(peer); });
        proxy_.uponSignal("PeerDisconnected").onInterface(INTERFACE_NAME).call([this](const sdbus::ObjectPath& peer){ this->onPeerDisconnected(peer); });
    }

    ~Group_proxy() = default;

    virtual void onPeerJoined(const sdbus::ObjectPath& peer) = 0;
    virtual void onPeerDisconnected(const sdbus::ObjectPath& peer) = 0;

public:
    std::vector<sdbus::ObjectPath> Members()
    {
        return proxy_.getProperty("Members").onInterface(INTERFACE_NAME);
    }

    sdbus::ObjectPath Group()
    {
        return proxy_.getProperty("Group").onInterface(INTERFACE_NAME);
    }

    std::string Role()
    {
        return proxy_.getProperty("Role").onInterface(INTERFACE_NAME);
    }

    std::vector<uint8_t> SSID()
    {
        return proxy_.getProperty("SSID").onInterface(INTERFACE_NAME);
    }

    std::vector<uint8_t> BSSID()
    {
        return proxy_.getProperty("BSSID").onInterface(INTERFACE_NAME);
    }

    uint16_t Frequency()
    {
        return proxy_.getProperty("Frequency").onInterface(INTERFACE_NAME);
    }

    std::string Passphrase()
    {
        return proxy_.getProperty("Passphrase").onInterface(INTERFACE_NAME);
    }

    std::vector<uint8_t> PSK()
    {
        return proxy_.getProperty("PSK").onInterface(INTERFACE_NAME);
    }

    std::vector<std::vector<uint8_t>> WPSVendorExtensions()
    {
        return proxy_.getProperty("WPSVendorExtensions").onInterface(INTERFACE_NAME);
    }

    void WPSVendorExtensions(const std::vector<std::vector<uint8_t>>& value)
    {
        proxy_.setProperty("WPSVendorExtensions").onInterface(INTERFACE_NAME).toValue(value);
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

#endif
