
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__dbus_hpp_org_freedesktop_NetworkManager_AgentManager_hpp__proxy__H__
#define __sdbuscpp__dbus_hpp_org_freedesktop_NetworkManager_AgentManager_hpp__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace NetworkManager {

class AgentManager_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.NetworkManager.AgentManager";

protected:
    AgentManager_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~AgentManager_proxy() = default;

public:
    void Register(const std::string& identifier)
    {
        proxy_.callMethod("Register").onInterface(INTERFACE_NAME).withArguments(identifier);
    }

    void RegisterWithCapabilities(const std::string& identifier, const uint32_t& capabilities)
    {
        proxy_.callMethod("RegisterWithCapabilities").onInterface(INTERFACE_NAME).withArguments(identifier, capabilities);
    }

    void Unregister()
    {
        proxy_.callMethod("Unregister").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

#endif
