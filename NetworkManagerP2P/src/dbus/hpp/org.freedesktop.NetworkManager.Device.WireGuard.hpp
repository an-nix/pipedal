
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__dbus_hpp_org_freedesktop_NetworkManager_Device_WireGuard_hpp__proxy__H__
#define __sdbuscpp__dbus_hpp_org_freedesktop_NetworkManager_Device_WireGuard_hpp__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace NetworkManager {
namespace Device {

class WireGuard_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.NetworkManager.Device.WireGuard";

protected:
    WireGuard_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~WireGuard_proxy() = default;

public:
    std::vector<uint8_t> PublicKey()
    {
        return proxy_.getProperty("PublicKey").onInterface(INTERFACE_NAME);
    }

    uint16_t ListenPort()
    {
        return proxy_.getProperty("ListenPort").onInterface(INTERFACE_NAME);
    }

    uint32_t FwMark()
    {
        return proxy_.getProperty("FwMark").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}}}} // namespaces

#endif
