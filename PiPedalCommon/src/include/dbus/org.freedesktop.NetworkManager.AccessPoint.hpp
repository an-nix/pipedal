
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp____src_include_dbus_org_freedesktop_NetworkManager_AccessPoint_hpp__proxy__H__
#define __sdbuscpp____src_include_dbus_org_freedesktop_NetworkManager_AccessPoint_hpp__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace NetworkManager {

class AccessPoint_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.NetworkManager.AccessPoint";

protected:
    AccessPoint_proxy(sdbus::IProxy& proxy)
        : m_proxy(proxy)
    {
    }

    AccessPoint_proxy(const AccessPoint_proxy&) = delete;
    AccessPoint_proxy& operator=(const AccessPoint_proxy&) = delete;
    AccessPoint_proxy(AccessPoint_proxy&&) = delete;
    AccessPoint_proxy& operator=(AccessPoint_proxy&&) = delete;

    ~AccessPoint_proxy() = default;

    void registerProxy()
    {
    }

public:
    uint32_t Flags()
    {
        return m_proxy.getProperty("Flags").onInterface(INTERFACE_NAME).get<uint32_t>();
    }

    uint32_t WpaFlags()
    {
        return m_proxy.getProperty("WpaFlags").onInterface(INTERFACE_NAME).get<uint32_t>();
    }

    uint32_t RsnFlags()
    {
        return m_proxy.getProperty("RsnFlags").onInterface(INTERFACE_NAME).get<uint32_t>();
    }

    std::vector<uint8_t> Ssid()
    {
        return m_proxy.getProperty("Ssid").onInterface(INTERFACE_NAME).get<std::vector<uint8_t>>();
    }

    uint32_t Frequency()
    {
        return m_proxy.getProperty("Frequency").onInterface(INTERFACE_NAME).get<uint32_t>();
    }

    std::string HwAddress()
    {
        return m_proxy.getProperty("HwAddress").onInterface(INTERFACE_NAME).get<std::string>();
    }

    uint32_t Mode()
    {
        return m_proxy.getProperty("Mode").onInterface(INTERFACE_NAME).get<uint32_t>();
    }

    uint32_t MaxBitrate()
    {
        return m_proxy.getProperty("MaxBitrate").onInterface(INTERFACE_NAME).get<uint32_t>();
    }

    uint8_t Strength()
    {
        return m_proxy.getProperty("Strength").onInterface(INTERFACE_NAME).get<uint8_t>();
    }

    int32_t LastSeen()
    {
        return m_proxy.getProperty("LastSeen").onInterface(INTERFACE_NAME).get<int32_t>();
    }

private:
    sdbus::IProxy& m_proxy;
};

}}} // namespaces

#endif
